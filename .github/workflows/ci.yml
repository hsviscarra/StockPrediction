name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: 1.8.2

      - name: Configure Poetry and Install Dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-root --with dev

      - name: Run pre-commit checks
        run: pre-commit run --all-files
      
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      
      - name: Set up Airflow DB
        run: |
          export AIRFLOW_HOME="$HOME/airflow"
          export AIRFLOW__CORE__SQL_ALCHEMY_CONN="sqlite:///$AIRFLOW_HOME/airflow.db"
          mkdir -p "$AIRFLOW_HOME"
          echo "AIRFLOW_HOME=$AIRFLOW_HOME" >> $GITHUB_ENV
          echo "AIRFLOW__CORE__SQL_ALCHEMY_CONN=$AIRFLOW__CORE__SQL_ALCHEMY_CONN" >> $GITHUB_ENV
          airflow db migrate
      
      - name: Run tests
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/services/api:$(pwd)/src
          pytest --maxfail=1 --disable-warnings
        env:
          MLFLOW_TRACKING_URI: dummy
          CI: true

      - name: Log in to Docker Hub
        if: success() && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build & Push API Image
        uses: docker/build-push-action@v5
        with:
          context: ./services/api
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/api:latest

      - name: Build & Push Streamlit Image
        if: success() && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: ./services/streamlit
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest

      - name: Build & Push Airflow Image
        if: success() && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: ./services/airflow
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/airflow:latest

      - name: Build & Push MLflow Image
        if: success() && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: ./services/mlflow
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mlflow:latest
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.5
      
      - name: Terraform Init
        run: terraform init -input=false -no-color
        working-directory: ./infra
      
      - name: Terraform Plan
        run: | 
          terraform plan -input=false -no-color -out=tfplan 
            -var="prefix=stockanalytics" 
            -var="dockerhub_username=${{ secrets.DOCKERHUB_USERNAME }}" 
            -var="dockerhub_password=${{ secrets.DOCKERHUB_PASSWORD }}" 
            -var="resource_group_name=stockanalytics-rg" 
            -var="location=eastus" 
        working-directory: ./infra
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Terraform Apply
        run: terraform apply -input=false -no-color -auto-approve tfplan
        working-directory: ./infra
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      
      - name: Terraform Output
        run: |
          echo "üåê Streamlit App:"
          terraform output -raw streamlit_fqdn
        working-directory: ./infra

      # - name: Azure Login
      #   if: success() && github.ref == 'refs/heads/main'
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: Deploy to Azure Web App
      #   if: success() && github.ref == 'refs/heads/main'
      #   uses: azure/webapps-deploy@v2
      #   with:
      #     app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
      #     slot-name: 'production'
      #     images: ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest
  
